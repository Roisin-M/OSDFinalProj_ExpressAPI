# Base URL for the API
@endpoint=http://localhost:3000/yoga-studio-management-api/v1/instructors

# 1. POST - Create an Instructor
# @name postAnInstructor
POST {{endpoint}} HTTP/1.1
Content-Type: application/json

{
  "name": "Rois Shannon",
  "yogaSpecialities": ["Hatha", "Vinyasa"],
  "email": "mary.shan@example.com"
}
###

# Capture the location header from the response to get the ID of the newly created instructor (direct ObjectId)
@InstructorID = {{postAnInstructor.response.headers.location}}

# 2. GET - Retrieve Instructor by ID (Using InstructorID from POST response)
GET {{endpoint}}/{{InstructorID}} HTTP/1.1
###

# 3. GET - Retrieve All Instructors
# @name getAllInstructors
GET {{endpoint}} HTTP/1.1
Content-Type: application/json
###

# 4. POST - Create an Instructor with Empty Specialities Array
# @name postAnInstructorWithEmptyArray
POST {{endpoint}} HTTP/1.1
Content-Type: application/json

{
  "name": "Alice Smith",
  "yogaSpecialities": [],
  "email": "alice.smith@example.com"
}
###

# 5. DELETE - Delete Instructor by ID (Using InstructorID captured from first POST request)
DELETE {{endpoint}}/{{InstructorID}} HTTP/1.1
Content-Type: application/json
###

# 6. Update - Update the Instructor (Using InstructorID captured from the POST request)
# Updating the yogaSpecialities - this will return error as this user has already been deleted
PUT {{endpoint}}/{{InstructorID}} HTTP/1.1
Content-Type: application/json

{
  "yogaSpecialities": ["Hatha"]
}
###

# 7. Capture the First Instructor's ID from the list of all instructors
@FirstInstructorID = {{getAllInstructors.response.body.$[0]._id}}

# 8. DELETE - Delete the first instructor in the list of all instructors
DELETE {{endpoint}}/{{FirstInstructorID}} HTTP/1.1
Content-Type: application/json
###

# 9. Update - Update Email and Yoga Specialities of the First Instructor (Using FirstInstructorID)
PUT {{endpoint}}/{{FirstInstructorID}} HTTP/1.1
Content-Type: application/json

{
  "yogaSpecialities": ["Bikram", "Kundalini"],
  "email": "updated.email@example.com"
}
###

# 10. Try to GET a Non-Existent Instructor (Invalid ID)
GET {{endpoint}}/nonexistentID HTTP/1.1
Content-Type: application/json
###

# 11. POST - Create Another Instructor (for validation)
# @name postAnotherInstructor
POST {{endpoint}} HTTP/1.1
Content-Type: application/json

{
  "name": "John Doe",
  "yogaSpecialities": ["Ashtanga", "Power Yoga"],
  "email": "john.doe@example.com"
}
###

# Capture the new instructor ID from the response location header (direct ObjectId)
@AnotherInstructorID = {{postAnotherInstructor.response.headers.location}}

# 12. GET - Retrieve Another Instructor by ID (Using AnotherInstructorID)
GET {{endpoint}}/{{AnotherInstructorID}} HTTP/1.1
###
