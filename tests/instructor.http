# Base URL for the API
@endpoint=http://localhost:3000/yoga-studio-management-api/v1/instructors

# 1. POST - Create an Instructor (Invalid Email)
# @name postAnInstructorInvalidEmail
POST {{endpoint}} HTTP/1.1
Content-Type: application/json

{
  "name": "Rois Shannon",
  "yogaSpecialities": ["Hatha", "Vinyasa"],
  "email": "invalid-email",
  "password": "StrongPass1!"
}
###

# 2. POST - Create an Instructor (Empty Yoga Specialities)
# @name postAnInstructorWithEmptyYogaSpecialities
POST {{endpoint}} HTTP/1.1
Content-Type: application/json

{
  "name": "Alice Smith",
  "yogaSpecialities": [],
  "email": "alice.smith@example.com",
  "password": "StrongPass1!"
}
###

# 3. POST - Create an Instructor (Invalid Yoga Speciality)
# @name postAnInstructorWithInvalidYogaSpeciality
POST {{endpoint}} HTTP/1.1
Content-Type: application/json

{
  "name": "Jane Doe",
  "yogaSpecialities": ["InvalidYogaType"],
  "email": "jane.doe@example.com",
  "password": "StrongPass1!"
}
###

# 4. POST - Create a Valid Instructor (Success)
# @name postValidInstructor
POST {{endpoint}} HTTP/1.1
Content-Type: application/json

{
  "name": "adrienne yogi",
  "yogaSpecialities": ["Ashtanga", "Bikram"],
  "email": "email@example.com",
  "password": "@Hi12345"
}
###
@InstructorID = {{postValidInstructor.response.headers.location}}

# 5. GET - Retrieve Instructor by ID
GET {{endpoint}}/{{InstructorID}} HTTP/1.1
###

# 6. GET - Retrieve All Instructors
# @name GetAllInstructors
GET {{endpoint}} HTTP/1.1
Content-Type: application/json
###

# 7. PUT - Update an Instructor Completely (Invalid Instructor ID)
# @name putInvalidInstructorID
PUT {{endpoint}}/invalid-id HTTP/1.1
Content-Type: application/json

{
  "name": "Updated Name",
  "yogaSpecialities": ["Restorative"],
  "email": "updated.email@example.com",
  "password": "UpdatedPass1!",
  "classIds": []
}
###

# 8. PUT - Update an Instructor Completely (Success)
# @name putValidInstructorUpdate
PUT {{endpoint}}/{{InstructorID}} HTTP/1.1
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2U0M2ZmZTY5NjRjNzI0MWIyYzVmY2QiLCJlbWFpbCI6ImVtYWlsQGV4YW1wbGUuY29tIiwibmFtZSI6ImFkcmllbm5lIHlvZ2kiLCJyb2xlIjoiaW5zdHJ1Y3RvciIsImlhdCI6MTc0MzAyNDI0MiwiZXhwIjoxNzQzMDU0MjQyfQ.n_t4n3hvwZ3S3ER-FeODdsL5vmdJoLfK8RKaHzORdGM

{
  "name": "Updated John Doe",
  "yogaSpecialities": ["Kundalini", "Power Yoga"],
  "email": "updated.john.doe@example.com",
  "password": "UpdatedPass1!",
  "classIds": []
}
###

# 8b. PUT - Update an Instructor Completely invalid field
PUT {{endpoint}}/{{InstructorID}} HTTP/1.1
Content-Type: application/json

{
  "name": "Updated John Doe",
  "yogaSpecialities": ["Kundalini", "Power Yoga"],
  "email": "updated.john.doe@example.com",
  "password": "UpdatedPass1!",
  "classIds": [],
  "invalidField": "uh-oh"
}
###

# 9. PATCH - Update an Instructor Partially
# @name patchUpdateInstructorYogaSpecialities
PATCH {{endpoint}}/{{InstructorID}} HTTP/1.1
Content-Type: application/json

{
  "yogaSpecialities": ["Hatha", "Vinyasa", "Restorative"]
}
###

# 10. PATCH - Update an Instructor Partially (Invalid Field)
# @name patchUpdateInstructorInvalidField
PATCH {{endpoint}}/{{InstructorID}} HTTP/1.1
Content-Type: application/json

{
  "unknownField": "Invalid Update",
  "email": "invalidpatch@example.com"
}
###

# 11. DELETE - Delete Instructor by ID
DELETE {{endpoint}}/{{InstructorID}} HTTP/1.1
Content-Type: application/json
###

# 12. POST - Create Another Instructor
# @name postAnotherInstructor
POST {{endpoint}} HTTP/1.1
Content-Type: application/json

{
  "name": "Jane Doe",
  "yogaSpecialities": ["Vinyasa", "Restorative"],
  "email": "jane.doe@example.com",
  "password": "JanePass1!"
}
###
@AnotherInstructorID = {{postAnotherInstructor.response.headers.location}}

# 13. GET - Retrieve Another Instructor by ID
# @name GetAnotherInstructorByID
GET {{endpoint}}/{{AnotherInstructorID}} HTTP/1.1
###

# 14. GET - Retrieve all instructors with yoga specialities "Vinyasa"
# @name GetFilteredInstructorsWithVinyasa
GET {{endpoint}}?filter={"yogaSpecialities":"Vinyasa"} HTTP/1.1
###

# 15. GET - Retrieve paginated instructors (Page 2, PageSize 5)
# @name GetPaginatedInstructors
GET {{endpoint}}?page=2&pageSize=5 HTTP/1.1
Content-Type: application/json
###

# 16. GET - Retrieve Instructor with Associated Classes
# @name GetInstructorWithClasses
GET {{endpoint}}/673b81982ffa0fbbc33f94a5 HTTP/1.1
###

# 17. DELETE - Delete Another Instructor by ID
# @name DeleteAnotherInstructor
DELETE {{endpoint}}/{{AnotherInstructorID}} HTTP/1.1
Content-Type: application/json
###

# 18. GET - Try to Retrieve a Deleted Instructor
# @name GetDeletedInstructor
GET {{endpoint}}/{{AnotherInstructorID}} HTTP/1.1
###

# 19. GET - Retrieve all instructors with yoga specialities "Hatha" and "Vinyasa"
# @name GetInstructorsWithOnlyHathaAndVinyasa
GET {{endpoint}}?filter={"yogaSpecialities":{"$all":["Hatha","Vinyasa"],"$size":2}}
###

# 20. GET - Retrieve all instructors with yoga specialities "Hatha" or "Vinyasa"
# @name GetInstructorsWithEitherHathaOrVinyasa
GET {{endpoint}}?filter={"yogaSpecialities":{"$in":["Hatha","Vinyasa"]}}
###


# 11. DELETE - Delete Instructor by ID
DELETE {{endpoint}}/67e43e550fb5f8bb01aea077 HTTP/1.1
Content-Type: application/json
###